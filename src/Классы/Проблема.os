#Использовать json


Перем id Экспорт, self, key Экспорт, fields Экспорт;

Процедура ПриСозданииОбъекта() Экспорт
	
	id = "";
	self = "";
	key = "";
	fields = Новый Структура();
	
КонецПроцедуры

Процедура УстановитьДанные(Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		УстановитьДанныеИзСтруктуры(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		
		_преобразовательJSON = Новый ПарсерJSON();
		
		JSONПакет = _преобразовательJSON.ПрочитатьJSON(Данные, , , Истина);
		
		УстановитьДанныеИзСтруктуры(JSONПакет);
		
	Иначе
		ВызватьИсключение "Установка данных типом " + ТипЗнч(Данные) + " не реализована";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеИзСтруктуры(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Свойство("id", id) Тогда
		ВызватьИсключение "Свойство id не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("key", key) Тогда
		ВызватьИсключение "Свойство key не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("fields", fields) Тогда
		ВызватьИсключение "Свойство fields не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("self", self) Тогда
		ВызватьИсключение "Свойство self не определено в данных установки";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияПоля(ПолноеНаименованиеПоля, НовоеЗначениеПоля, ТекущийОбрабатываемыйУровень = 0) Экспорт
	
	ДоступныйУровниРазименования = УровеньРазименования(ПолноеНаименованиеПоля);
		
	Если ТекущийОбрабатываемыйУровень = 0 И ДоступныйУровниРазименования = 0 Тогда
		ОбновитьОсновныеАтрибуты(ПолноеНаименованиеПоля, НовоеЗначениеПоля);
	КонецЕсли;
	
	Если ДоступныйУровниРазименования > 0 Тогда
		
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПолноеНаименованиеПоля, ".");
		
		Если МассивПодстрок[0] = "fields" И ТекущийОбрабатываемыйУровень = 0 Тогда
			КоллекцияАтрибутов = fields;
			ТекущийОбрабатываемыйУровень = ТекущийОбрабатываемыйУровень + 1;

			Если ТипЗнч(КоллекцияАтрибутов) = Тип("Структура") Тогда
				Если КоллекцияАтрибутов.Свойство(МассивПодстрок[ТекущийОбрабатываемыйУровень]) Тогда
					КоллекцияАтрибутов.Вставить(МассивПодстрок[ТекущийОбрабатываемыйУровень], НовоеЗначениеПоля)
				КонецЕсли;
			КонецЕсли;

			fields = КоллекцияАтрибутов;		
		// ИначеЕсли ТекМассивПодстрок[0] = "fields" И ТекущийОбрабатываемыйУровень = 1 Тогда

		// 	Результат = fields.Свойство(ТекМассивПодстрок[ТекущийОбрабатываемыйУровень],КоллекцияАтрибутов);

		// 	Если ТипЗнч(КоллекцияАтрибутов) = Тип("Структура") Тогда
		// 		Если КоллекцияАтрибутов.Свойство(МассивПодстрок[ТекущийОбрабатываемыйУровень]) Тогда
		// 			КоллекцияАтрибутов.Вставить(МассивПодстрок[ТекущийОбрабатываемыйУровень], НовоеЗначениеПоля)
		// 		КонецЕсли;
		// 	ИначеЕсли ТипЗнч(КоллекцияАтрибутов) = Тип("Массив")  Тогда
		// 		КоллекцияАтрибутов = НовоеЗначениеПоля;
		// 	ИначеЕсли ТипЗнч(КоллекцияАтрибутов) = Тип("Число") 
		// 				Или ТипЗнч(КоллекцияАтрибутов) = Тип("Дата") 
		// 				ИЛИ ТипЗнч(КоллекцияАтрибутов) = Тип("Число") Тогда
				
		// 		КоллекцияАтрибутов = НовоеЗначениеПоля;
		// 	Иначе
		// 		ВызватьИсключение СтрШаблон("Установка атрибута типа %1 не реализовано",ТипЗнч())
		// 	КонецЕсли;
		
		КонецЕсли;
		Если ТекущийОбрабатываемыйУровень < ДоступныйУровниРазименования - 1 Тогда
			УстановитьЗначенияПоля(ПолноеНаименованиеПоля, НовоеЗначениеПоля, ТекущийОбрабатываемыйУровень)
		КонецЕсли;

	КонецЕсли;
	
	

КонецПроцедуры

Процедура ОбновитьОсновныеАтрибуты(ПолноеНаименованиеПоля, НовоеЗначениеПоля)

Если ПолноеНаименованиеПоля = "id" и ТипЗначенияСовпадаетСТипомАтрибута(id, НовоеЗначениеПоля) Тогда
id = НовоеЗначениеПоля;
КонецЕсли;

Если ПолноеНаименованиеПоля = "key" и ТипЗначенияСовпадаетСТипомАтрибута(id, НовоеЗначениеПоля) Тогда
key = НовоеЗначениеПоля;
КонецЕсли;

КонецПроцедуры

Функция ТипЗначенияСовпадаетСТипомАтрибута(Атрибут, НовоеЗначение)

Если ТипЗнч(Атрибут) = ТипЗнч(НовоеЗначение) Тогда
Возврат Истина;
Иначе
ВызватьИсключение СтрШаблон("Не совпадают типы атрибута %1 и нового значения %2", ТипЗнч(Атрибут), ТипЗнч(НовоеЗначение));
КонецЕсли;

КонецФункции

Функция УровеньРазименования(ПолноеИмя) 
Возврат СтрЧислоВхождений(ПолноеИмя, ".");
КонецФункции


Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


ПриСозданииОбъекта();
УстановитьЗначенияПоля("key" , "MF01-28");
УстановитьЗначенияПоля("fields.summary" , "ОбновленноеЗначениеПоля");