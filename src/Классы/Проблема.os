#Использовать json


Перем id Экспорт, self, key Экспорт, fields Экспорт;

Процедура ПриСозданииОбъекта() Экспорт
	
	id = "";
	self = "";
	key = "";
	fields = Новый Структура();
	
КонецПроцедуры

Процедура УстановитьДанные(Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		УстановитьДанныеИзСтруктуры(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		
		_преобразовательJSON = Новый ПарсерJSON();
		
		JSONПакет = _преобразовательJSON.ПрочитатьJSON(Данные, , , Истина);
		
		УстановитьДанныеИзСтруктуры(JSONПакет);
		
	Иначе
		ВызватьИсключение "Установка данных типом " + ТипЗнч(Данные) + " не реализована";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеИзСтруктуры(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Свойство("id", id) Тогда
		ВызватьИсключение "Свойство id не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("key", key) Тогда
		ВызватьИсключение "Свойство key не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("fields", fields) Тогда
		ВызватьИсключение "Свойство fields не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("self", self) Тогда
		ВызватьИсключение "Свойство self не определено в данных установки";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначенияПоля(ПолноеНаименованиеПоля, НовоеЗначениеПоля) Экспорт
	
	id = "";
	key = "";
	fields = Новый Структура();
	
	ТекущийУровеньРазименования = УровеньРазименования(ПолноеНаименованиеПоля);
	
	Если ТекущийУровеньРазименования = 0 Тогда
		ОбновитьОсновныеАтрибуты(ПолноеНаименованиеПоля, НовоеЗначениеПоля);
	КонецЕсли;
	
	Если ТекущийУровеньРазименования > 0 Тогда
		
		МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ПолноеНаименованиеПоля, ".");
		
		Если МассивПодстрок[0] = "fields" Тогда
			КоллекцияАтрибутов = fields;
		КонецЕсли;

		Если ТипЗнч(КоллекцияАтрибутов) = Тип("Структура") Тогда
			Если КоллекцияАтрибутов.Свойство(МассивПодстрок[1]) Тогда
				КоллекцияАтрибутов.Вставить(МассивПодстрок[1], НовоеЗначениеПоля)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	

КонецПроцедуры

Процедура ОбновитьОсновныеАтрибуты(ПолноеНаименованиеПоля, НовоеЗначениеПоля)

Если ПолноеНаименованиеПоля = "id" и ТипЗначенияСовпадаетСТипомАтрибута(id, НовоеЗначениеПоля) Тогда
id = НовоеЗначениеПоля;
КонецЕсли;

Если ПолноеНаименованиеПоля = "key" и ТипЗначенияСовпадаетСТипомАтрибута(id, НовоеЗначениеПоля) Тогда
key = НовоеЗначениеПоля;
КонецЕсли;

КонецПроцедуры

Функция ТипЗначенияСовпадаетСТипомАтрибута(Атрибут, НовоеЗначение)

Если ТипЗнч(Атрибут) = ТипЗнч(НовоеЗначение) Тогда
Возврат Истина;
Иначе
ВызватьИсключение СтрШаблон("Не совпадают типы атрибута %1 и нового значения %2", ТипЗнч(Атрибут), ТипЗнч(НовоеЗначение));
КонецЕсли;

КонецФункции

Функция УровеньРазименования(ПолноеИмя) 
Возврат СтрЧислоВхождений(ПолноеИмя, ".");
КонецФункции


Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
Знач ПропускатьПустыеСтроки = Неопределено)

Результат = Новый Массив;

// для обеспечения обратной совместимости
Если ПропускатьПустыеСтроки = Неопределено Тогда
ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
Если ПустаяСтрока(Строка) Тогда
	Если Разделитель = " " Тогда
		Результат.Добавить("");
	КонецЕсли;
	Возврат Результат;
КонецЕсли;
КонецЕсли;
//

Позиция = Найти(Строка, Разделитель);
Пока Позиция > 0 Цикл
Подстрока = Лев(Строка, Позиция - 1);
Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
	Результат.Добавить(Подстрока);
КонецЕсли;
Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
Позиция = Найти(Строка, Разделитель);
КонецЦикла;

Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
Результат.Добавить(Строка);
КонецЕсли;

Возврат Результат;

КонецФункции

ПриСозданииОбъекта();
УстановитьЗначенияПоля("fields.summary" , "ОбновленноеЗначениеПоля")