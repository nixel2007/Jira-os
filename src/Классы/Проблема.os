#Использовать json
#Использовать 1connector




Перем id Экспорт, key Экспорт, fields Экспорт;
Перем self;

Перем Логин Экспорт, Пароль Экспорт, АдресСистемы Экспорт, КукиДоступа Экспорт;
Перем СоотРеализованыхЗапросов;


Процедура ПриСозданииОбъекта(ДанныеУстановки = Неопределено, ПараметрыДоступа = Неопределено) Экспорт
	
	Если НЕ ПараметрыДоступа = Неопределено Тогда
		Логин = ПараметрыДоступа.Логин;
		Пароль = ПараметрыДоступа.Пароль;
		АдресСистемы = ПараметрыДоступа.АдресСистемы;
		КукиДоступа = ПараметрыДоступа.КукиДоступа;
	КонецЕсли;
	
	
	Если ДанныеУстановки = Неопределено Тогда
		id = "";
		self = "";
		key = "";
		fields = Новый Структура();
	Иначе
		УстановитьДанные(ДанныеУстановки);
	КонецЕсли;
	
	СоотРеализованыхЗапросов = ПолучитьСоотРеализованыхЗапросов();
	
КонецПроцедуры

Процедура УстановитьДанные(Данные) Экспорт
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		УстановитьДанныеИзСтруктуры(Данные);
		
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		
		_преобразовательJSON = Новый ПарсерJSON();
		
		JSONПакет = _преобразовательJSON.ПрочитатьJSON(Данные, , , Истина);
		
		УстановитьДанныеИзСтруктуры(JSONПакет);
		
	Иначе
		ВызватьИсключение "Установка данных типом " + ТипЗнч(Данные) + " не реализована";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДанныеИзСтруктуры(СтруктураДанных)
	
	Если НЕ СтруктураДанных.Свойство("id", id) Тогда
		ВызватьИсключение "Свойство id не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("key", key) Тогда
		ВызватьИсключение "Свойство key не определено в данных установки";
	КонецЕсли;
	
	Если НЕ СтруктураДанных.Свойство("fields", fields) Тогда
		ВызватьИсключение "Свойство fields не определено в данных установки";
	КонецЕсли;
	
КонецПроцедуры

Функция Изменить(СтркНовыеЗначенияПолей) Экспорт
	
	СтрктRESTЗапроса = СоотРеализованыхЗапросов.Получить("Изменить");
	
	СтрктRESTЗапроса.ПараметрыШаблонаREST.issueIdOrKey = key;
	
	СтрктRESTЗапроса.ПараметрыЗапросаREST = Новый Структура("fields", СтркНовыеЗначенияПолей);
	
	РезультатЗапроса = ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса);
	
	Возврат РезультатЗапроса;
	
	
КонецФункции



Функция ПолучитьСоотРеализованыхЗапросов()
	СтркТипЗапроса = Новый Структура("гет,пост,пут", "GET", "POST", "PUT");
	
	СтрокаПоляПараметровAPI = "ТипЗапросаREST,АдресREST,ПараметрыШаблонаREST,ПараметрыЗапросаREST";
	
	СоответствиеЗапросов = Новый Соответствие();
	
	СтрокаЗапросаREST = "/rest/api/2/issue/{issueIdOrKey}";
	СтркПараметрыШаблонаREST = Новый Структура("issueIdOrKey");
	СтркПараметрыЗапросаREST = Новый Структура();
	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, СтркТипЗапроса.пут, СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("Изменить", СтркПараметрыAPI);

	СтрокаЗапросаREST = "/rest/api/2/issue";	
	СтркПараметрыШаблонаREST = Новый Структура();	
	СтрокаОсновныеПоля 		 = "project,issuetype,summary,description";
	СтрокаДополнительныеПоля = "fixVersions,priority,labels,versions,components,reporter,timetracking,parent,duedate";
	СтруктураFields = Новый Структура(СтрокаОсновныеПоля + "," + СтрокаДополнительныеПоля);
	СтркПараметрыЗапросаREST = Новый Структура("update,fields");

	СтркПараметрыAPI = Новый Структура(СтрокаПоляПараметровAPI, СтркТипЗапроса.пост, СтрокаЗапросаREST, СтркПараметрыШаблонаREST, СтркПараметрыЗапросаREST);
	СоответствиеЗапросов.Вставить("СоздатьПроблему", СтркПараметрыAPI);


	Возврат СоответствиеЗапросов;
КонецФункции



#Область Вспомогательный
Функция ПолучитьОтветJSONRest(АдресСистемы, КукиДоступа, СтрктRESTЗапроса) Экспорт
	
	_преобразовательJSON = Новый ПарсерJSON();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie", КукиДоступа);
	
	
	СтрктRESTЗапроса = ЗаполнитьПараметрыШаблона(СтрктRESTЗапроса);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Cookie", КукиДоступа);
	Если СтрктRESTЗапроса.ТипЗапросаREST = "GET" Тогда
		Если ЕстьЗаполненныеПоляСтрк(СтрктRESTЗапроса.ПараметрыЗапросаREST) Тогда
			Результат = КоннекторHTTP.Get(АдресСистемы + СтрктRESTЗапроса.АдресREST, СтрктRESTЗапроса.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
		Иначе
			Результат = КоннекторHTTP.Get(АдресСистемы + СтрктRESTЗапроса.АдресREST, , Новый Структура("Заголовки", Заголовки)).Текст();
		КонецЕсли;
	ИначеЕсли СтрктRESTЗапроса.ТипЗапросаREST = "PUT" Тогда
		Результат = КоннекторHTTP.Put(АдресСистемы + СтрктRESTЗапроса.АдресREST, , СтрктRESTЗапроса.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
	ИначеЕсли СтрктRESTЗапроса.ТипЗапросаREST = "POST" Тогда
		Результат = КоннекторHTTP.Post(АдресСистемы + СтрктRESTЗапроса.АдресREST, , СтрктRESTЗапроса.ПараметрыЗапросаREST, Новый Структура("Заголовки", Заголовки)).Текст();
	Иначе
		ВызватьИсключение "Вызывается не реализованный вид запроса";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат _преобразовательJSON.ПрочитатьJSON(Результат, , , Истина);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	

КонецФункции

Функция ЕстьЗаполненныеПоляСтрк(СтруктураНаПроверку)
		
		
	Для каждого ТекЭлемент Из СтруктураНаПроверку Цикл
		Если ЗначениеЗаполнено(ТекЭлемент.Значение) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьПараметрыШаблона(СтрктRESTЗапроса)
	
	СтрокаЗапроса = СтрктRESTЗапроса.АдресREST;
	Для каждого ТекПараметрШаблона Из СтрктRESTЗапроса.ПараметрыШаблонаREST Цикл
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "{" + ТекПараметрШаблона.Ключ + "}", ТекПараметрШаблона.Значение);
	КонецЦикла;
	СтрктRESTЗапроса.АдресREST = СтрокаЗапроса;
	
	Возврат СтрктRESTЗапроса;
КонецФункции

#КонецОбласти
